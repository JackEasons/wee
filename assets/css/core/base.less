//////////
// Base //
//////////

* {
	&,
	&:before,
	&:after {
		.border-box();
		.margin(0);
		.outline(0);
		.padding(0);
	}
}
html,
body {
	.min-width(@minWidth);
}
html {
	-ms-text-size-adjust: 100%;
	-webkit-text-size-adjust: 100%;
	font-family: '"1"';
	.font-size(@rootFontSize);
}
body {
	.baseColor();
	.font(@baseFont; @baseFontSize; @baseFontWeight);
	.line-height(@baseLineHeight);
	.relative();
	.wee-body-background () when not (@bodyBackground = false) {
		.background();
	}
	.wee-body-background();
}
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
	.block();
}
embed,
img,
object {
	.max-width(100%);
}
embed,
object {
	.height(100%);
}
audio,
canvas,
video {
	.inline-block();
}
abbr[title] {
	.border(bottom);
}
b,
strong,
.bold {
	.font-weight(@boldFontWeight);
}
mark {
	.background(@markBackground);
	.color(@markColor);
}
canvas {
	-ms-touch-action: double-tap-zoom;
}
iframe {
	.spaced()
}
.wee-figure () {
	.align(center);
	.padding(@figurePadding);
	.relative();
	.spaced();
	img {
		.spaced();
	}
	figcaption {
		.color(@figCaptionColor);
		.font-style(@figCaptionFontStyle);
		.line-height(@figCaptionLineHeight);
	}
}
.wee-figure () when not (@figureRounded = 0)
		and not (@figureRounded = false) {
	.rounded(@figureRounded);
}
.wee-figure () when not (@figureBorderColor = false) {
	.border(@figureBorderColor);
}
figure {
	.wee-figure();
}
img {
	-ms-interpolation-mode: bicubic;
	.inline-block();
}
sub,
sup {
	.align(baseline);
	.font-size(.6em);
	.line-height(0);
	.margin(left; .3em);
	.relative();
}
sub {
	.bottom(-.25em);
}
sup {
	.top(-1em);
}
::-moz-selection {
	.selection();
}
::selection {
	.selection();
}

////////////////
// Typography //
////////////////

h1,
h2,
h3,
h4,
h5,
h6,
.h1,
.h2,
.h3,
.h4,
.h5,
.h6 {
	.color(@headingColor);
	.font(@headingFont);
	.font-weight(@headingFontWeight);
	.line-height(@headingLineHeight);
	.spaced(@headingMarginBottom);
	small {
		.font-weight(normal);
	}
}
h1,
.h1 {
	.font-size(@h1);
}
h2,
.h2 {
	.font-size(@h2);
}
h3,
.h3 {
	.font-size(@h3);
}
h4,
.h4 {
	.font-size(@h4);
}
h5,
.h5 {
	.font-size(@h5);
}
h6,
.h6 {
	.font-size(@h6);
}
.subheader {
	.color(@subHeadingColor);
	.font-weight(@subHeadingFontWeight);
}
p {
	.color(@paragraphColor);
	.font-weight(@paragraphFontWeight);
	.line-height(@paragraphLineHeight);
	.spaced(@paragraphMarginBottom);
}
small {
	.font-size(@smallFontSize);
}
dfn,
em,
i,
var,
.italic {
	font-style: italic;
}
blockquote,
q {
	.color(@quoteColor);
	.font(@quoteFont; @quoteFontSize; @quoteFontWeight; @quoteLineHeight; @quoteFontStyle);
	cite {
		.color(@citeColor);
		.font(@citeFont; @citeFontSize; @citeFontWeight; @citeLineHeight; @citeFontStyle);
		.margin(top; @citeMarginTop);
		&:before {
			.content(@citeIndicator);
		}
	}
	p {
		.color(@quoteColor);
	}
}
.wee-blockquote () {
	.padding(@quotePaddingVertical; @quotePaddingHorizontal);
	.spaced();
	cite {
		.block();
	}
}
.wee-blockquote () when not (@quoteBorderWidth = 0)
		and not (@quoteBorderWidth = false) {
	.border(left; @quoteBorderColor; @quoteBorderWidth);
}
blockquote,
.blockquote {
	.wee-blockquote();
}
.wee-code () when (@codeEnabled = true) {
	.rules () {
		.background(@codeBackground);
		.color(@codeColor);
		.font(@codeFont; @codeFontSize);
		.line-height(@codeLineHeight);
		.padding(@codePaddingVertical; @codePaddingHorizontal);
	}
	.rules () when not (@codeRounded = 0)
			and not (@codeRounded = false) {
		.rounded(@codeRounded);
	}
	.rules () when not (@codeBorderColor = false) {
		.border(@codeBorderColor);
	}
	code,
	kbd,
	samp {
		.rules();
	}
}
.wee-code();
.wee-code-block () when (@codeBlockEnabled = true) {
	.rules () {
		-moz-tab-size: @codeBlockTabSize;
		tab-size: @codeBlockTabSize;
		.background(@codeBlockBackground);
		.padding(@codeBlockPaddingVertical; @codeBlockPaddingHorizontal);
		.spaced();
		code {
			.sub-rules () when not (@codeBorderColor = false) {
				.border(none);
			}
			.background(none);
			.block();
			.color(@codeBlockColor);
			.font(@codeBlockFont; @codeBlockFontSize);
			.padding(0);
			.sub-rules();
		}
	}
	.rules () when not (@codeBlockRounded = 0)
			and not (@codeBlockRounded = false) {
		.rounded(@codeBlockRounded);
	}
	.rules () when not (@codeBlockBorderColor = false) {
		.border(@codeBlockBorderColor);
	}
	pre {
		.rules();
	}
}
.wee-code-block();
del,
s,
strike {
	.line-through();
}
a {
	.color(@linkColor);
	.outline(0);
	.text-decoration(@linkDecoration);
	&:focus {
		.outline();
	}
	&:hover {
		.color(@linkColorHover);
	}
	&:active {
		.color(@linkColorActive);
	}
	img {
		.border(0);
	}
}
hr,
.hr {
	.block();
	.border(0);
	.border(top; @ruleColor; @ruleHeight; @ruleStyle);
	.height(1px);
	.margin(vertical; @ruleMargin);
}
address {
	.color(@addressColor);
	.font(@addressFont; @addressFontSize; @addressFontWeight; @addressLineHeight; @addressFontStyle);
	.spaced();
}

///////////
// Lists //
///////////

dl,
ol,
ul {
	list-style-position: inside;
	.color(@listColor);
	.line-height(@listLineHeight);
	.spaced(@listMarginBottom);
	li {
		.spaced(@liMarginBottom);
	}
}
ol,
ul {
	ol,
	ul {
		.spaced(0);
		.margin(left; @liMarginLeft);
	}
}
ul {
	list-style-type: disc;
	ul {
		list-style-type: circle;
		ul {
			list-style-type: square;
		}
	}
}
ol {
	list-style-type: decimal;
}
nav {
	ol,
	ul {
		.margin(0);
		.unstyled();
		li {
			.spaced(0);
		}
	}
}
dl {
	.spaced(@dlMarginBottom);
}
dt {
	.color(@dtColor);
	.font(@dtFont; @dtFontSize);
	.spaced(@dtMarginBottom);
}
dd {
	.color(@ddColor);
	.font(@ddFont; @ddFontSize);
	.spaced(@ddMarginBottom);
}

////////////
// Tables //
////////////

.wee-table () when (@tableEnabled = true) {
	.rules () {
		border-collapse: collapse;
		border-spacing: 0;
		empty-cells: show;
		table-layout: fixed;
		word-wrap: break-word;
		-ms-word-wrap: break-word;
		.fill();
		.spaced();
		td,
		th {
			.align(left);
			.align(top);
			.border(top; @tableCellBorderColor);
			.line-height(@tableCellLineHeight);
			.padding(@tableCellPaddingVertical; @tableCellPaddingHorizontal);
		}
		thead,
		tfoot {
			.bold();
			th {
				.align(bottom);
				.darkestGray();
			}
		}
		tbody {
			.wee-table-striped(@tableStriped);
		}
		caption {
			.background(@tableCaptionBackground);
			.font-style(@tableCaptionFontStyle);
			.padding(@tableCaptionPaddingVertical; @tableCaptionPaddingHorizontal);
		}
		img {
			.align(top);
		}
		.wee-table-bordered(@tableBordered);
	}
	.toggle () when (@tableStyled = true) {
		table,
		.table {
			.rules();
		}
	}
	.toggle () when not (@tableStyled = true) {
		.table {
			.rules();
		}
	}
	.table-bordered () when not (@tableBordered = true) {
		.table-bordered {
			.wee-table-bordered(true);
		}
	}
	.table-striped () when not (@tableStriped = true)
			and not (@tableStripedBackground = false) {
		.table-striped {
			.wee-table-striped(true);
		}
	}
	.table-bordered();
	.table-striped();
	.toggle();
}
.wee-table-bordered (@output) when (@output = true) {
	.border(bottom; @tableCellBorderColor);
	caption {
		.border(@tableCellBorderColor);
		.border(bottom; 0);
	}
	td,
	th {
		.border(right; @tableCellBorderColor);
		&:first-child {
			.border(left; @tableCellBorderColor);
		}
	}
}
.wee-table-striped (@output) when (@output = true)
		and (@tableStripedPosition = even) {
	tr {
		&:nth-child(even) {
			td {
				.background(@tableStripedBackground);
			}
		}
	}
}
.wee-table-striped (@output) when (@output = true)
		and not (@tableStripedPosition = even) {
	tr {
		&:nth-child(odd) {
			td {
				.background(@tableStripedBackground);
			}
		}
	}
}
.wee-table();

///////////
// Forms //
///////////

.wee-form () when (@formEnabled = true) {
	form {
		.spaced();
	}
	button,
	input,
	select,
	textarea {
		.font(@inputFont; @inputFontSize; normal);
		.margin(0);
	}
	button::-moz-focus-inner,
	input::-moz-focus-inner {
		.border(0);
		.padding(0);
	}
	.placeholder () {
		.color(@inputPlaceholderColor);
	}
	:-moz-placeholder {
		.placeholder();
	}
	::-moz-placeholder {
		.placeholder();
	}
	:-ms-input-placeholder {
		.placeholder();
	}
	::-webkit-input-placeholder {
		.placeholder();
	}
	fieldset {
		.border(0);
		.spaced();
	}
	legend {
		.border(0);
		.color(@legendColor);
		.font(@legendFont; @legendFontSize);
		.line-height();
		.spaced-block(@legendMarginBottom);
	}
	label {
		.font-weight(@labelFontWeight);
		.line-height(@labelLineHeight);
		.spaced-block(@labelMarginBottom);
	}
	input[type='checkbox'],
	input[type='radio'] {
		.margin(right; @checkboxMarginRight);
		.padding(0);
	}
	.input () {
		.background(@inputBackground);
		.background-clip();
		.color(@inputColor);
		.fill();
		.padding(@inputPaddingVertical; @inputPaddingHorizontal);
		.spaced(@inputMarginBottom);
		&:focus {
			&:required {
				&:invalid {
					.background(@inputBackgroundInvalid);
					.border(@inputBorderColorInvalid);
					.color(@inputColorInvalid);
				}
			}
		}
		&:invalid {
			.background(@inputBackgroundInvalid);
			.color(@inputColorInvalid);
			.border () when not (@inputBorderWidthInvalid = 0)
					and not (@inputBorderWidthInvalid = false) {
				.border(@inputBorderColorInvalid; @inputBorderWidthInvalid);
				&:hover {
					.border(@inputBorderColorInvalidHover);
				}
				&:focus {
					.border(@inputBorderColorInvalidFocus);
				}
			}
			.border () when (@inputBorderWidthInvalid = 0), (@inputBorderWidthInvalid = false) {
				.border-width(0);
			}
			.border();
		}
		&:required {
			.background(@inputBackgroundRequired);
			.border(@inputBorderColorRequired);
			.color(@inputColorRequired);
			.border () when not (@inputBorderWidthRequired = 0)
					and not (@inputBorderWidthRequired = false) {
				.border(@inputBorderColorRequired; @inputBorderWidthRequired);
				&:hover {
					.border(@inputBorderColorRequiredHover);
				}
				&:focus {
					.border(@inputBorderColorRequiredFocus);
				}
			}
			.border () when (@inputBorderWidthRequired = 0), (@inputBorderWidthRequired = false) {
				.border-width(0);
			}
			.border();
		}
	}
	.input () when not (@inputBorderWidth = 0)
			and not (@inputBorderWidth = false) {
		.border(@inputBorderColor; @inputBorderWidth);
		&:hover {
			.border(@inputBorderColorHover);
		}
		&:focus {
			.border(@inputBorderColorFocus);
		}
	}
	.input () when (@inputBorderWidth = 0), (@inputBorderWidth = false) {
		.border-width(0);
	}
	.input () when not (@inputMinHeight = 0)
			and not (@inputMinHeight = false) {
		.min-height(@inputMinHeight);
	}
	.input () when not (@inputMinWidth = 0)
			and not (@inputMinWidth = false) {
		.min-width(@inputMinWidth);
	}
	.input () when not (@inputRounded = 0)
			and not (@inputRounded = false) {
		.rounded(@inputRounded);
	}
	.input () when (@inputEnableInnerShadow = true) {
		.shadow(inner; dark; .1; 1px; 1px; 2px; 0);
	}
	.input () when (@inputEnableFocusOuterShadow = true) {
		&:focus {
			.shadow(dark; .1; 0; 0; 2px; 2px);
		}
	}
	input[type='email'],
	input[type='file'],
	input[type='number'],
	input[type='password'],
	input[type='search'],
	input[type='tel'],
	input[type='text'],
	textarea,
	select {
		.input();
	}
	input[type='email'],
	input[type='file'],
	input[type='number'],
	input[type='password'],
	input[type='search'],
	input[type='tel'],
	input[type='text'],
	textarea {
		-moz-appearance: none;
		-webkit-appearance: none;
	}
	input[type='search']::-webkit-search-decoration {
		.hide();
	}
	input[type='button'],
	input[type='reset'],
	input[type='submit'] {
		-moz-appearance: none;
		-webkit-appearance: none;
		.cursor();
	}
	select {
		.cursor();
		.outline(0);
		.padding(right; @inputPaddingVertical);
		&[multiple] {
			.align(top);
			.min-height(@multiSelectMinHeight);
			&:after {
				.content();
			}
		}
	}
	textarea {
		.align(top);
		.line-height(@textareaLineHeight);
		.min-height(@textareaMinHeight);
		.padding(@textareaPaddingVertical; @textareaPaddingHorizontal);
		.resizable(@textareaResize);
	}
	input[disabled] {
		.background-color(@inputBackgroundDisabled);
		.color(@inputColorDisabled);
		.cursor(@inputCursorDisabled);
	}
	.inline-field {
		button,
		input,
		select,
		textarea {
			.inline-block();
			.width(auto);
		}
		label {
			.inline-block();
			.margin(right; @labelMarginRight);
		}
	}
}
.wee-form();

/////////////
// Buttons //
/////////////

.wee-button () when (@buttonEnabled = true) {
	.rules () {
		-webkit-tap-highlight-color: @buttonBackgroundHover;
		.align(center);
		.background(@buttonBackground);
		.color(@buttonColor);
		.cursor();
		.font(@buttonFont; @buttonFontSize; @buttonFontWeight);
		.inline-block();
		.line-height(1em);
		.spaced(@buttonMarginBottom);
		.padding(@buttonPaddingVertical; @buttonPaddingHorizontal);
		.text-shadow(none);
		&:hover {
			.background-color(@buttonBackgroundHover);
			.color(@buttonColor);
		}
		&:active {
			.background-color(@buttonBackgroundActive);
			.color(@buttonColor);
		}
	}
	.rules () when not (@buttonRounded = 0)
			and not (@buttonRounded = false) {
		.rounded(@buttonRounded);
	}
	.rules () when not (@buttonBorderColor = false) {
		.border(@buttonBorderColor);
	}
	.rules () when (@buttonBorderColor = false) {
		.border(0);
	}
	.rules () when (@buttonBevelEnabled = true) {
		.shadow(inner; @buttonBevelColor; @buttonBevelOpacity; 0px);
	}
	.rules () when (@buttonTransitionEnabled = true) {
		.transition(background-color);
	}
	.colored-rules () {
		border-color: @coloredButtonBorderColor;
		-webkit-tap-highlight-color: @coloredButtonBackgroundHover;
		.background(@coloredButtonBackground);
		.color(@coloredButtonColor);
		&:hover {
			.background-color(@coloredButtonBackgroundHover);
			.color(@coloredButtonColor);
		}
		&:active {
			.background-color(@coloredButtonBackgroundActive);
			.color(@coloredButtonColor);
		}
	}
	.disabled-rules () {
		.cursor(@disabledButtonCursor);
		&,
		&:active,
		&:hover {
			.background(@disabledButtonBackground);
			.color(@disabledButtonColor);
		}
	}
	.disabled-rules () when not (@buttonBorderColor = false) {
		.border(@disabledButtonBorderColor);
	}
	.toggle () when (@buttonStyled = true) {
		button,
		input[type='button'],
		input[type='reset'],
		input[type='submit'],
		.button {
			.rules();
			&.button-colored {
				.colored-rules();
			}
			&[disabled],
			&.button-disabled {
				.disabled-rules();
			}
		}
	}
	.toggle () when not (@buttonStyled = true) {
		.button {
			.rules();
		}
		.button-colored {
			.colored-rules();
		}
		.button[disabled],
		.button-disabled {
			.disabled-rules();
		}
	}
	.toggle();
	button[disabled] {
		.cursor(@disabledButtonCursor);
	}
}
.wee-button();